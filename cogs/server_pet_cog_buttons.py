import discord
from discord.ext import commands
from discord.ui import View, Button
import json
import os
import datetime

PET_DATA_PATH = "data/pets.json"
TIMESTAMP_PATH = "data/interaction_timestamps.json"

FOOD_VALUES = {
    "„Ç≠„É©„Ç≠„É©": ("kirakira", 10),
    "„Ç´„ÉÅ„Ç´„ÉÅ": ("kachikachi", 10),
    "„ÇÇ„Å°„ÇÇ„Å°": ("mochimochi", 10),
    "„Åµ„Çè„Åµ„Çè": ("fuwafuwa", 10),
}

def load_json(path, default={}):
    if not os.path.exists(path):
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_pet_image_path(personality: str, mood_score: int) -> str:
    # mood„Çπ„Ç≥„Ç¢„Å´„Çà„ÇäÁîªÂÉè„ÅÆË°®ÊÉÖ„ÇíÈÅ∏Êäû
    if mood_score >= 70:
        mood = "happy"
    elif mood_score >= 40:
        mood = "neutral"
    else:
        mood = "angry"

    personality_map = {
        "„Åµ„Çè„Åµ„Çè": "fuwafuwa",
        "„Ç≠„É©„Ç≠„É©": "kirakira",
        "„Ç´„ÉÅ„Ç´„ÉÅ": "kachikachi",
        "„ÇÇ„Å°„ÇÇ„Å°": "mochimochi",
    }

    p = personality_map.get(personality, "fuwafuwa")
    filename = f"images/pet_{p}_{mood}.png"
    return filename

class PetButtonView(View):
    def __init__(self, bot, user_id):
        super().__init__(timeout=None)
        self.bot = bot
        self.user_id = str(user_id)

        # È§å„Éú„Çø„É≥„ÇíËøΩÂä†
        for food in FOOD_VALUES:
            self.add_item(PetActionButton(label=food, action="feed", style=discord.ButtonStyle.primary, user_id=self.user_id, bot=bot))

        # Êï£Ê≠©„Éú„Çø„É≥
        self.add_item(PetActionButton(label="Êï£Ê≠©", action="walk", style=discord.ButtonStyle.success, user_id=self.user_id, bot=bot))
        # Êí´„Åß„Çã„Éú„Çø„É≥
        self.add_item(PetActionButton(label="Êí´„Åß„Çã", action="pet", style=discord.ButtonStyle.secondary, user_id=self.user_id, bot=bot))

class PetActionButton(Button):
    def __init__(self, label, action, style, user_id, bot):
        super().__init__(label=label, style=style)
        self.label = label
        self.action = action
        self.user_id = user_id
        self.bot = bot

    async def callback(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        now = datetime.datetime.now()

        # Âà©Áî®Â±•Ê≠¥„É≠„Éº„Éâ
        timestamps = load_json(TIMESTAMP_PATH)
        user_times = timestamps.get(user_id, {})
        last_time_str = user_times.get(self.action)

        if last_time_str:
            last_time = datetime.datetime.fromisoformat(last_time_str)
            if now - last_time < datetime.timedelta(hours=1):
                await interaction.response.send_message(f"{self.label}„ÅØ1ÊôÇÈñì„Å´1Âõû„Å†„Åë‰Ωø„Åà„Åæ„Åô„ÄÇ", ephemeral=True)
                return

        # „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÊõ¥Êñ∞
        user_times[self.action] = now.isoformat()
        timestamps[user_id] = user_times
        save_json(TIMESTAMP_PATH, timestamps)

        # „Éö„ÉÉ„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        pet = load_json(PET_DATA_PATH, default={
            "personality": "„Åµ„Çè„Åµ„Çè",
            "mood": 50,
            "exp": {"„Ç≠„É©„Ç≠„É©":0, "„Ç´„ÉÅ„Ç´„ÉÅ":0, "„ÇÇ„Å°„ÇÇ„Å°":0, "„Åµ„Çè„Åµ„Çè":0, "walk":0, "pet":0}
        })

        # „Ç¢„ÇØ„Ç∑„Éß„É≥Âà•Âá¶ÁêÜ
        if self.action == "feed":
            category = self.label
            pet["exp"][category] = pet["exp"].get(category, 0) + 1
            pet["mood"] = min(100, pet.get("mood", 50) + 3)
            pet["personality"] = category
            await interaction.response.send_message(f"üçö {category}„Çí„ÅÇ„Åí„Åæ„Åó„ÅüÔºÅ", ephemeral=True)

        elif self.action == "walk":
            pet["mood"] = max(0, pet.get("mood", 50) - 5)
            pet["exp"]["walk"] = pet["exp"].get("walk", 0) + 1
            await interaction.response.send_message("„ÉÜ„ÇØ„ÉÜ„ÇØ‚Ä¶‚Ä¶„ÅÑ„ÅÑÂ§©Ê∞ó„Å†„Å£„Åü„Å≠ÔºÅ‚òÄÔ∏è", ephemeral=True)

        elif self.action == "pet":
            pet["mood"] = min(100, pet.get("mood", 50) + 5)
            pet["exp"]["pet"] = pet["exp"].get("pet", 0) + 1
            await interaction.response.send_message("„Å™„Åß„Å™„Åß‚Ä¶‚Ä¶„Éü„É´„ÇØ„Ç∑„É•„Ç¨„Éº„ÅØÂ¨â„Åó„Åù„ÅÜÔºÅ‚ú®", ephemeral=True)

        # „Éö„ÉÉ„Éà„Éá„Éº„Çø‰øùÂ≠ò
        save_json(PET_DATA_PATH, pet)

class „Éö„ÉÉ„Éà„Ç≤„Éº„É†(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="pet")
    async def show_pet(self, ctx):
        pet = load_json(PET_DATA_PATH, default={
            "personality": "„Åµ„Çè„Åµ„Çè",
            "mood": 50,
            "exp": {"„Ç≠„É©„Ç≠„É©":0, "„Ç´„ÉÅ„Ç´„ÉÅ":0, "„ÇÇ„Å°„ÇÇ„Å°":0, "„Åµ„Çè„Åµ„Çè":0, "walk":0, "pet":0}
        })

        personality = pet.get("personality", "„Åµ„Çè„Åµ„Çè")
        mood = pet.get("mood", 50)

        image_path = get_pet_image_path(personality, mood)

        # ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅÆ‰ª£Êõø
        if not os.path.exists(image_path):
            image_path = "images/pet_fuwafuwa_neutral.png"

        file = discord.File(image_path, filename="pet.png")

        embed = discord.Embed(
            title="üê∂ „Éü„É´„ÇØ„Ç∑„É•„Ç¨„Éº„ÅÆËÇ≤Êàê",
            description=f"ÊÄßÊ†º: {personality}\nÊ©üÂ´å: {mood}/100",
            color=discord.Color.pink()
        )
        embed.set_image(url="attachment://pet.png")

        view = PetButtonView(bot=self.bot, user_id=ctx.author.id)
        await ctx.send(embed=embed, file=file, view=view)

async def setup(bot):
    await bot.add_cog(„Éö„ÉÉ„Éà„Ç≤„Éº„É†(bot))
